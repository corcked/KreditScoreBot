import hashlib
import secrets
from typing import Optional, Tuple
from urllib.parse import urlencode


class ReferralSystem:
    """–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏"""

    # –î–ª–∏–Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
    CODE_LENGTH = 8
    
    # –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è deep-link
    DEEPLINK_PREFIX = "ref_"
    
    # –°–µ–∫—Ä–µ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–æ–≤ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
    SECRET_SALT = "kreditscore_referral_salt"

    @staticmethod
    def generate_referral_code(user_id: int) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
        """
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ user_id –∏ —Å–æ–ª–∏
        unique_string = f"{user_id}_{ReferralSystem.SECRET_SALT}"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–µ—à
        hash_object = hashlib.sha256(unique_string.encode())
        hash_hex = hash_object.hexdigest()
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ N —Å–∏–º–≤–æ–ª–æ–≤ —Ö–µ—à–∞
        return hash_hex[:ReferralSystem.CODE_LENGTH]

    @staticmethod
    def generate_referral_link(bot_username: str, user_id: int) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
        
        Args:
            bot_username: Username –±–æ—Ç–∞ (–±–µ–∑ @)
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –ü–æ–ª–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
        """
        referral_code = ReferralSystem.generate_referral_code(user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º deep-link –ø–∞—Ä–∞–º–µ—Ç—Ä
        start_param = f"{ReferralSystem.DEEPLINK_PREFIX}{referral_code}"
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É
        return f"https://t.me/{bot_username}?start={start_param}"

    @staticmethod
    def parse_referral_code(start_param: str) -> Optional[str]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ start
        
        Args:
            start_param: –ü–∞—Ä–∞–º–µ—Ç—Ä start –∏–∑ deep-link
            
        Returns:
            –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏–ª–∏ None
        """
        if not start_param:
            return None
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞
        if start_param.startswith(ReferralSystem.DEEPLINK_PREFIX):
            return start_param[len(ReferralSystem.DEEPLINK_PREFIX):]
            
        return None

    @staticmethod
    def validate_referral_code(code: str) -> bool:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
        
        Args:
            code: –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
            
        Returns:
            True –µ—Å–ª–∏ –∫–æ–¥ –≤–∞–ª–∏–¥–Ω—ã–π
        """
        if not code:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
        if len(code) != ReferralSystem.CODE_LENGTH:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã (hex)
        try:
            int(code, 16)
            return True
        except ValueError:
            return False

    @staticmethod
    def find_referrer_by_code(code: str, user_id: int) -> Optional[int]:
        """
        –ü–æ–∏—Å–∫ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –ø–æ –∫–æ–¥—É
        
        –≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å
        –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        
        Args:
            code: –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
            user_id: ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å —Å–∞–º–æ—Ä–µ—Ñ–µ—Ä–∞–ª)
            
        Returns:
            ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –∏–ª–∏ None
        """
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î
        # –°–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        return None

    @staticmethod
    def can_use_referral(new_user_id: int, referrer_id: int) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
        
        Args:
            new_user_id: ID –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            referrer_id: ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (–º–æ–∂–Ω–æ_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –ø—Ä–∏—á–∏–Ω–∞_–æ—Ç–∫–∞–∑–∞)
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∞–º–æ—Ä–µ—Ñ–µ—Ä–∞–ª
        if new_user_id == referrer_id:
            return False, "–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É"
            
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:
        # - –ù–µ –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        # - –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –æ–Ω —É–∂–µ —á—å—é-—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        # - –ù–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        
        return True, ""

    @staticmethod
    def format_referral_message(link: str, count: int = 0, translate=None) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
        
        Args:
            link: –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
            count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            translate: –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        _ = translate if translate else lambda x: x
        message = f"üéÅ **{_('Referral Program')}**\\n\\n"
        message += f"{_('Invite friends and get bonuses!')}\\n\\n"
        message += f"üìä {_('Invited users')}: **{count}** {_('people')}\\n\\n"
        message += f"üîó {_('Your referral link')}:\\n`{link}`\\n\\n"
        message += _('Share this link with friends. When they register using your link, you will automatically receive bonus points!')
        
        return message

    @staticmethod
    def generate_share_text(link: str, translate=None) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞
        
        Args:
            link: –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
            translate: –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
            
        Returns:
            –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        _ = translate if translate else lambda x: x
        text = f"üè¶ KreditScore - {_('discover your credit rating!')}\\n\\n"
        text += f"‚úÖ {_('Instant debt burden calculation')}\\n"
        text += f"‚úÖ {_('Credit approval probability assessment')}\\n"
        text += f"‚úÖ {_('Best offers from banks')}\\n\\n"
        text += f"{_('Start now')}: {link}"
        
        return text

    @staticmethod
    def create_share_button_url(link: str, translate=None) -> str:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ URL –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è" –≤ Telegram
        
        Args:
            link: –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
            translate: –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
            
        Returns:
            URL –¥–ª—è inline-–∫–Ω–æ–ø–∫–∏
        """
        share_text = ReferralSystem.generate_share_text(link, translate)
        params = {
            'text': share_text
        }
        return f"https://t.me/share/url?{urlencode(params)}"