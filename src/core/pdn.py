from decimal import Decimal, ROUND_HALF_UP
from typing import Optional, Dict, Any

from src.core.enums import PDNStatus, LoanType


class PDNCalculator:
    """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è –¥–æ–ª–≥–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ (–ü–î–ù)"""

    # –õ–∏–º–∏—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫—Ä–µ–¥–∏—Ç–æ–≤
    LOAN_LIMITS = {
        LoanType.MICROLOAN: {
            "max_amount": 100_000_000,  # 100 –º–ª–Ω —Å—É–º
            "min_rate": 18,  # 18%
            "max_rate": 79,  # 79%
            "min_term_months": 1,
            "max_term_months": 36,  # 3 –≥–æ–¥–∞
        },
        LoanType.CARLOAN: {
            "max_amount": 1_000_000_000,  # 1 –º–ª—Ä–¥ —Å—É–º
            "min_rate": 4,  # 4%
            "max_rate": 48,  # 48%
            "min_term_months": 6,
            "max_term_months": 60,  # 5 –ª–µ—Ç
        },
    }

    # –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ü–î–ù
    PDN_THRESHOLDS = {
        "warning": 35,  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        "danger": 50,  # –û–ø–∞—Å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (–±–∞–Ω–∫–∏ –Ω–µ –≤—ã–¥–∞—é—Ç –∫—Ä–µ–¥–∏—Ç—ã)
    }

    @staticmethod
    def calculate_annuity_payment(
        amount: Decimal, annual_rate: Decimal, term_months: int
    ) -> Decimal:
        """
        –†–∞—Å—á–µ—Ç –∞–Ω–Ω—É–∏—Ç–µ—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ:
        A = P √ó [r(1+r)^n] / [(1+r)^n - 1]
        
        Args:
            amount: –°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞
            annual_rate: –ì–æ–¥–æ–≤–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
            term_months: –°—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ –≤ –º–µ—Å—è—Ü–∞—Ö
            
        Returns:
            –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –∞–Ω–Ω—É–∏—Ç–µ—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        """
        if amount <= 0 or annual_rate < 0 or term_months <= 0:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞")

        # –ï—Å–ª–∏ —Å—Ç–∞–≤–∫–∞ 0%, —Ç–æ –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∏–º —Å—É–º–º—É –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤
        if annual_rate == 0:
            return (amount / term_months).quantize(
                Decimal("0.01"), rounding=ROUND_HALF_UP
            )

        # –ú–µ—Å—è—á–Ω–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞
        monthly_rate = annual_rate / 12 / 100

        # –†–∞—Å—á–µ—Ç –∞–Ω–Ω—É–∏—Ç–µ—Ç–Ω–æ–≥–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞
        rate_power = (1 + monthly_rate) ** term_months
        annuity_coefficient = (monthly_rate * rate_power) / (rate_power - 1)

        # –†–∞—Å—á–µ—Ç –ø–ª–∞—Ç–µ–∂–∞
        payment = amount * annuity_coefficient
        return payment.quantize(Decimal("0.01"), rounding=ROUND_HALF_UP)

    @staticmethod
    def calculate_pdn(
        monthly_payment: Decimal,
        monthly_income: Decimal,
        other_payments: Optional[Decimal] = None,
    ) -> Decimal:
        """
        –†–∞—Å—á–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è –¥–æ–ª–≥–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ (–ü–î–ù)
        
        Args:
            monthly_payment: –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –ø–æ –Ω–æ–≤–æ–º—É –∫—Ä–µ–¥–∏—Ç—É
            monthly_income: –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥
            other_payments: –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ –¥—Ä—É–≥–∏–º –∫—Ä–µ–¥–∏—Ç–∞–º
            
        Returns:
            –ü–î–ù –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        """
        if monthly_income <= 0:
            raise ValueError("–î–æ—Ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")

        total_payments = monthly_payment
        if other_payments and other_payments > 0:
            total_payments += other_payments

        pdn = (total_payments / monthly_income) * 100
        return pdn.quantize(Decimal("0.01"), rounding=ROUND_HALF_UP)

    @staticmethod
    def get_pdn_status(pdn_value: Decimal) -> PDNStatus:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ü–î–ù –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        
        Args:
            pdn_value: –ó–Ω–∞—á–µ–Ω–∏–µ –ü–î–ù –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            
        Returns:
            –°—Ç–∞—Ç—É—Å –ü–î–ù (–∑–µ–ª–µ–Ω—ã–π/–∂–µ–ª—Ç—ã–π/–∫—Ä–∞—Å–Ω—ã–π)
        """
        if pdn_value < PDNCalculator.PDN_THRESHOLDS["warning"]:
            return PDNStatus.GREEN
        elif pdn_value <= PDNCalculator.PDN_THRESHOLDS["danger"]:
            return PDNStatus.YELLOW
        else:
            return PDNStatus.RED

    @staticmethod
    def get_pdn_emoji(status: PDNStatus) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ü–î–ù"""
        return {
            PDNStatus.GREEN: "üü¢",
            PDNStatus.YELLOW: "üü°",
            PDNStatus.RED: "üî¥",
        }[status]

    @staticmethod
    def validate_loan_parameters(
        loan_type: LoanType, amount: Decimal, rate: Decimal, term_months: int
    ) -> Dict[str, Any]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫—Ä–µ–¥–∏—Ç–∞
        
        Args:
            loan_type: –¢–∏–ø –∫—Ä–µ–¥–∏—Ç–∞
            amount: –°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞
            rate: –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞
            term_months: –°—Ä–æ–∫ –≤ –º–µ—Å—è—Ü–∞—Ö
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        limits = PDNCalculator.LOAN_LIMITS[loan_type]
        errors = []

        if amount <= 0:
            errors.append("–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        elif amount > limits["max_amount"]:
            errors.append(
                f"–°—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª—è {loan_type.value}: "
                f"{limits['max_amount']:,} —Å—É–º"
            )

        if rate < limits["min_rate"] or rate > limits["max_rate"]:
            errors.append(
                f"–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {limits['min_rate']}% "
                f"–¥–æ {limits['max_rate']}%"
            )

        if (
            term_months < limits["min_term_months"]
            or term_months > limits["max_term_months"]
        ):
            errors.append(
                f"–°—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç {limits['min_term_months']} "
                f"–¥–æ {limits['max_term_months']} –º–µ—Å—è—Ü–µ–≤"
            )

        return {"valid": len(errors) == 0, "errors": errors}

    @staticmethod
    def can_get_loan(pdn_value: Decimal) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞ –ø–æ –ü–î–ù
        
        –í –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–µ –±–∞–Ω–∫–∏ –Ω–µ –º–æ–≥—É—Ç –≤—ã–¥–∞–≤–∞—Ç—å –∫—Ä–µ–¥–∏—Ç—ã –ø—Ä–∏ –ü–î–ù > 50%
        """
        return pdn_value <= PDNCalculator.PDN_THRESHOLDS["danger"]

    @staticmethod
    def format_amount(amount: Decimal) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        return f"{amount:,.0f}".replace(",", " ")

    @staticmethod
    def get_pdn_description(pdn_value: Decimal, status: PDNStatus) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ü–î–ù –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        emoji = PDNCalculator.get_pdn_emoji(status)
        
        if status == PDNStatus.GREEN:
            desc = "–û—Ç–ª–∏—á–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å! –ë–∞–Ω–∫–∏ –æ—Ö–æ—Ç–Ω–æ –æ–¥–æ–±—Ä—è—Ç –∫—Ä–µ–¥–∏—Ç."
        elif status == PDNStatus.YELLOW:
            desc = "–ü—Ä–∏–µ–º–ª–µ–º—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å. –í–æ–∑–º–æ–∂–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞."
        else:
            desc = "–í—ã—Å–æ–∫–∞—è –¥–æ–ª–≥–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞! –ë–∞–Ω–∫–∏ –Ω–µ —Å–º–æ–≥—É—Ç –≤—ã–¥–∞—Ç—å –∫—Ä–µ–¥–∏—Ç."
            
        return f"{emoji} –ü–î–ù: {pdn_value}%\\n{desc}"