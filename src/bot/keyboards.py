from typing import Callable, List, Optional

from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)

from src.core.enums import (
    CarCondition,
    Education,
    Gender,
    HousingStatus,
    LoanType,
    MaritalStatus,
    ReceiveMethod,
    Region,
)


class Keyboards:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏"""

    @staticmethod
    def phone_request(_: Callable[[str], str]) -> ReplyKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        keyboard = [
            [KeyboardButton(text=f"üì± {_('Share phone number')}", request_contact=True)]
        ]
        return ReplyKeyboardMarkup(
            keyboard=keyboard,
            resize_keyboard=True,
            one_time_keyboard=True
        )

    @staticmethod
    def remove() -> ReplyKeyboardRemove:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        return ReplyKeyboardRemove()

    @staticmethod
    def language_choice(_: Callable[[str], str]) -> InlineKeyboardMarkup:
        """–í—ã–±–æ—Ä —è–∑—ã–∫–∞"""
        keyboard = [
            [
                InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang:ru"),
                InlineKeyboardButton(text="üá∫üáø O'zbek", callback_data="lang:uz"),
            ]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def main_menu(_: Callable[[str], str]) -> InlineKeyboardMarkup:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton(text=f"üí≥ {_('New application')}", callback_data="new_loan")],
            [InlineKeyboardButton(text=f"üìã {_('My applications')}", callback_data="my_applications")],
            [InlineKeyboardButton(text=f"üìä {_('My indicators')}", callback_data="my_score")],
            [InlineKeyboardButton(text=f"üë§ {_('Personal data')}", callback_data="personal_data")],
            [InlineKeyboardButton(text=f"üéÅ {_('Referral program')}", callback_data="referral")],
            [InlineKeyboardButton(text=f"‚öôÔ∏è {_('Settings')}", callback_data="settings")],
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def loan_type_choice(_: Callable[[str], str]) -> InlineKeyboardMarkup:
        """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫—Ä–µ–¥–∏—Ç–∞"""
        keyboard = [
            [InlineKeyboardButton(text=f"üöó {_('Car loan')}", callback_data=f"loan_type:{LoanType.CARLOAN.value}")],
            [InlineKeyboardButton(text=f"üí∞ {_('Microloan')}", callback_data=f"loan_type:{LoanType.MICROLOAN.value}")],
            [InlineKeyboardButton(text=f"‚ùå {_('Cancel')}", callback_data="cancel")],
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def car_condition_choice(_: Callable[[str], str]) -> InlineKeyboardMarkup:
        """–í—ã–±–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        keyboard = [
            [InlineKeyboardButton(text=f"‚ú® {_('New')}", callback_data=f"car:{CarCondition.NEW.value}")],
            [InlineKeyboardButton(text=f"üöô {_('Used')}", callback_data=f"car:{CarCondition.USED.value}")],
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def receive_method_choice(_: Callable[[str], str]) -> InlineKeyboardMarkup:
        """–í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –ø–æ–ª—É—á–µ–Ω–∏—è"""
        keyboard = [
            [InlineKeyboardButton(text=f"üí≥ {_('To card')}", callback_data=f"receive:{ReceiveMethod.CARD.value}")],
            [InlineKeyboardButton(text=f"üíµ {_('Cash')}", callback_data=f"receive:{ReceiveMethod.CASH.value}")],
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def skip_other_payments(_: Callable[[str], str]) -> InlineKeyboardMarkup:
        """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–≤–æ–¥ –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π"""
        keyboard = [
            [InlineKeyboardButton(text=f"‚û°Ô∏è {_('Skip')}", callback_data="skip_other_payments")],
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def confirm_application(_: Callable[[str], str]) -> InlineKeyboardMarkup:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
        keyboard = [
            [
                InlineKeyboardButton(text=f"‚úÖ {_('Confirm')}", callback_data="confirm_app"),
                InlineKeyboardButton(text=f"‚ùå {_('Cancel')}", callback_data="cancel_app"),
            ]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def application_actions(_: Callable[[str], str], can_send: bool = True) -> InlineKeyboardMarkup:
        """–î–µ–π—Å—Ç–≤–∏—è —Å –∑–∞—è–≤–∫–æ–π"""
        keyboard = []
        
        if can_send:
            keyboard.append([InlineKeyboardButton(text=f"üè¶ {_('Send to bank')}", callback_data="send_to_bank")])
        
        keyboard.extend([
            [InlineKeyboardButton(text=f"üë§ {_('Fill personal data')}", callback_data="fill_personal")],
            [InlineKeyboardButton(text=f"üîô {_('Main menu')}", callback_data="main_menu")],
        ])
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def gender_choice(_: Callable[[str], str]) -> InlineKeyboardMarkup:
        """–í—ã–±–æ—Ä –ø–æ–ª–∞"""
        keyboard = [
            [
                InlineKeyboardButton(text=f"üë® {_('Male')}", callback_data=f"gender:{Gender.MALE.value}"),
                InlineKeyboardButton(text=f"üë© {_('Female')}", callback_data=f"gender:{Gender.FEMALE.value}"),
            ]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def yes_no_choice(_: Callable[[str], str], prefix: str) -> InlineKeyboardMarkup:
        """–í—ã–±–æ—Ä –¥–∞/–Ω–µ—Ç"""
        keyboard = [
            [
                InlineKeyboardButton(text=f"‚úÖ {_('Yes')}", callback_data=f"{prefix}:yes"),
                InlineKeyboardButton(text=f"‚ùå {_('No')}", callback_data=f"{prefix}:no"),
            ]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def marital_status_choice(_: Callable[[str], str]) -> InlineKeyboardMarkup:
        """–í—ã–±–æ—Ä —Å–µ–º–µ–π–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è"""
        keyboard = [
            [InlineKeyboardButton(text=f"üë§ {_('Single')}", callback_data=f"marital:{MaritalStatus.SINGLE.value}")],
            [InlineKeyboardButton(text=f"üíë {_('Married')}", callback_data=f"marital:{MaritalStatus.MARRIED.value}")],
            [InlineKeyboardButton(text=f"üíî {_('Divorced')}", callback_data=f"marital:{MaritalStatus.DIVORCED.value}")],
            [InlineKeyboardButton(text=f"üïä {_('Widowed')}", callback_data=f"marital:{MaritalStatus.WIDOWED.value}")],
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def education_choice(_: Callable[[str], str]) -> InlineKeyboardMarkup:
        """–í—ã–±–æ—Ä –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è"""
        keyboard = [
            [InlineKeyboardButton(text=f"üìö {_('Secondary')}", callback_data=f"edu:{Education.SECONDARY.value}")],
            [InlineKeyboardButton(text=f"üîß {_('Vocational')}", callback_data=f"edu:{Education.VOCATIONAL.value}")],
            [InlineKeyboardButton(text=f"üìñ {_('Incomplete higher')}", callback_data=f"edu:{Education.INCOMPLETE_HIGHER.value}")],
            [InlineKeyboardButton(text=f"üéì {_('Higher')}", callback_data=f"edu:{Education.HIGHER.value}")],
            [InlineKeyboardButton(text=f"üéìüéì {_('Postgraduate')}", callback_data=f"edu:{Education.POSTGRADUATE.value}")],
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def housing_status_choice(_: Callable[[str], str]) -> InlineKeyboardMarkup:
        """–í—ã–±–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –∂–∏–ª—å—è"""
        keyboard = [
            [InlineKeyboardButton(text=f"üè† {_('Own')}", callback_data=f"house:{HousingStatus.OWN.value}")],
            [InlineKeyboardButton(text=f"üè¶ {_('Own with mortgage')}", callback_data=f"house:{HousingStatus.OWN_WITH_MORTGAGE.value}")],
            [InlineKeyboardButton(text=f"üè¢ {_('Rent')}", callback_data=f"house:{HousingStatus.RENT.value}")],
            [InlineKeyboardButton(text=f"üë®‚Äçüë©‚Äçüëß {_('With relatives')}", callback_data=f"house:{HousingStatus.RELATIVES.value}")],
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def region_choice(_: Callable[[str], str]) -> InlineKeyboardMarkup:
        """–í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞ (–ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å)"""
        regions = [
            (f"üèô {_('Tashkent')}", Region.TASHKENT.value),
            (f"üåÜ {_('Tashkent region')}", Region.TASHKENT_REGION.value),
            ("–ê–Ω–¥–∏–∂–∞–Ω", Region.ANDIJAN.value),
            ("–ë—É—Ö–∞—Ä–∞", Region.BUKHARA.value),
            ("–§–µ—Ä–≥–∞–Ω–∞", Region.FERGANA.value),
            ("–î–∂–∏–∑–∞–∫", Region.JIZZAKH.value),
            ("–ù–∞–º–∞–Ω–≥–∞–Ω", Region.NAMANGAN.value),
        ]
        
        keyboard = []
        for name, value in regions:
            keyboard.append([InlineKeyboardButton(text=name, callback_data=f"region:{value}")])
        
        keyboard.append([InlineKeyboardButton(text=f"‚û°Ô∏è {_('Next')}", callback_data="region_more")])
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def region_choice_more(_: Callable[[str], str]) -> InlineKeyboardMarkup:
        """–í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞ (–≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å)"""
        regions = [
            ("–ù–∞–≤–æ–∏", Region.NAVOIY.value),
            ("–ö–∞—à–∫–∞–¥–∞—Ä—å—è", Region.QASHQADARYO.value),
            ("–°–∞–º–∞—Ä–∫–∞–Ω–¥", Region.SAMARKAND.value),
            ("–°—ã—Ä–¥–∞—Ä—å—è", Region.SIRDARYO.value),
            ("–°—É—Ä—Ö–∞–Ω–¥–∞—Ä—å—è", Region.SURXONDARYO.value),
            ("–•–æ—Ä–µ–∑–º", Region.XORAZM.value),
            ("–ö–∞—Ä–∞–∫–∞–ª–ø–∞–∫—Å—Ç–∞–Ω", Region.KARAKALPAKSTAN.value),
        ]
        
        keyboard = []
        for name, value in regions:
            keyboard.append([InlineKeyboardButton(text=name, callback_data=f"region:{value}")])
        
        keyboard.append([InlineKeyboardButton(text=f"‚¨ÖÔ∏è {_('Back')}", callback_data="region_back")])
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def back_button(_: Callable[[str], str], callback_data: str = "back") -> InlineKeyboardMarkup:
        """–ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥"""
        keyboard = [
            [InlineKeyboardButton(text=f"üîô {_('Back')}", callback_data=callback_data)]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def cancel_button(_: Callable[[str], str]) -> InlineKeyboardMarkup:
        """–ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã"""
        keyboard = [
            [InlineKeyboardButton(text=f"‚ùå {_('Cancel')}", callback_data="cancel")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def referral_menu(_: Callable[[str], str], share_url: str) -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        keyboard = [
            [InlineKeyboardButton(text=f"üì§ {_('Share')}", url=share_url)],
            [InlineKeyboardButton(text=f"üîô {_('Main menu')}", callback_data="main_menu")],
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def settings_menu(_: Callable[[str], str]) -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        keyboard = [
            [InlineKeyboardButton(text=f"üåê {_('Language')}", callback_data="change_language")],
            [InlineKeyboardButton(text=f"üîô {_('Main menu')}", callback_data="main_menu")],
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def personal_data_menu_protected(field_status: dict, _: Callable[[str], str]) -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —É—á–µ—Ç–æ–º –∑–∞—â–∏—Ç—ã –ø–æ–ª–µ–π"""
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö –ø–æ–ª–µ–π
        editable_fields = [
            (name, status) for name, status in field_status.items() 
            if not status['is_protected']
        ]
        
        if editable_fields:
            keyboard.append([InlineKeyboardButton(
                text=f"‚úèÔ∏è {_('Edit available fields')}",
                callback_data="edit_available_fields"
            )])
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        protected_count = sum(1 for s in field_status.values() if s['is_protected'])
        if protected_count > 0:
            keyboard.append([InlineKeyboardButton(
                text=f"üîí {_('View protected data')} ({protected_count})",
                callback_data="view_protected_data"
            )])
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∑–∞—â–∏—Ç—ã
        if protected_count > 0:
            keyboard.append([InlineKeyboardButton(
                text=f"‚ùì {_('Why are fields protected?')}",
                callback_data="explain_protection"
            )])
        
        keyboard.append([InlineKeyboardButton(text=f"‚óÄÔ∏è {_('Back')}", callback_data="main_menu")])
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def editable_fields_menu(field_status: dict, _: Callable[[str], str]) -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö –ø–æ–ª–µ–π"""
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö –ø–æ–ª–µ–π
        for field_name, status in field_status.items():
            if not status['is_protected']:
                icon = "üí∞" if field_name == 'monthly_income' else "üìù"
                text = f"{icon} {_(status['display_name'])}"
                
                if status['is_filled']:
                    text += " ‚úÖ"
                
                keyboard.append([InlineKeyboardButton(
                    text=text,
                    callback_data=f"edit_field:{field_name}"
                )])
        
        keyboard.append([InlineKeyboardButton(text=f"‚óÄÔ∏è {_('Back')}", callback_data="edit_personal_data")])
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def back_to_personal_data(_: Callable[[str], str]) -> InlineKeyboardMarkup:
        """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º"""
        keyboard = [
            [InlineKeyboardButton(text=f"‚óÄÔ∏è {_('Back')}", callback_data="edit_personal_data")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def back_to_menu(_: Callable[[str], str]) -> InlineKeyboardMarkup:
        """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton(text=f"üîô {_('Main menu')}", callback_data="main_menu")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

