import re
from decimal import Decimal
from typing import Optional, Tuple

from aiogram import Bot
from aiogram.types import User as TelegramUser

from src.core.enums import DeviceType


def validate_phone_number(phone: str) -> Optional[str]:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    
    Args:
        phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        
    Returns:
        –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ None
    """
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ-—Ü–∏—Ñ—Ä—ã
    digits = re.sub(r'\D', '', phone)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    # –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω
    if len(digits) == 12 and digits.startswith('998'):
        return f"+{digits}"
    elif len(digits) == 9 and digits.startswith('9'):
        return f"+998{digits}"
    
    # –†–æ—Å—Å–∏—è
    elif len(digits) == 11 and digits.startswith('7'):
        return f"+{digits}"
    elif len(digits) == 10 and digits.startswith('9'):
        return f"+7{digits}"
    elif len(digits) == 11 and digits.startswith('8'):
        # –ó–∞–º–µ–Ω—è–µ–º 8 –Ω–∞ +7 –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
        return f"+7{digits[1:]}"
    
    # –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ø–ª—é—Å–æ–º
    elif len(digits) >= 10 and len(digits) <= 15:
        # –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–∞–∑—É–º–Ω–æ–π –¥–ª–∏–Ω—ã
        return f"+{digits}"
    
    return None


def validate_amount(text: str, max_amount: int, translate=None) -> Tuple[bool, Optional[Decimal], Optional[str]]:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
    
    Args:
        text: –í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        max_amount: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞
        translate: –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
        
    Returns:
        (–≤–∞–ª–∏–¥–Ω–∞, —Å—É–º–º–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
    """
    _ = translate if translate else lambda x: x
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –∑–∞–ø—è—Ç—ã–µ
        clean_text = text.replace(' ', '').replace(',', '')
        amount = Decimal(clean_text)
        
        if amount <= 0:
            return False, None, _('Amount must be positive')
        
        if amount > max_amount:
            return False, None, f"{_('Maximum amount')}: {format_amount(max_amount)} {_('sum')}"
        
        return True, amount, None
    except:
        return False, None, _('Enter correct amount (numbers only)')


def validate_rate(text: str, min_rate: Decimal, max_rate: Decimal, translate=None) -> Tuple[bool, Optional[Decimal], Optional[str]]:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–∏
    
    Returns:
        (–≤–∞–ª–∏–¥–Ω–∞, —Å—Ç–∞–≤–∫–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
    """
    _ = translate if translate else lambda x: x
    try:
        rate = Decimal(text.replace(',', '.'))
        
        if rate < min_rate or rate > max_rate:
            return False, None, f"{_('Rate must be between')} {min_rate}% {_('and')} {max_rate}%"
        
        return True, rate, None
    except:
        return False, None, _('Enter correct interest rate')


def validate_term(text: str, min_months: int, max_months: int, translate=None) -> Tuple[bool, Optional[int], Optional[str]]:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ä–æ–∫–∞ –∫—Ä–µ–¥–∏—Ç–∞
    
    Returns:
        (–≤–∞–ª–∏–¥–µ–Ω, —Å—Ä–æ–∫ –≤ –º–µ—Å—è—Ü–∞—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
    """
    _ = translate if translate else lambda x: x
    try:
        months = int(text)
        
        if months < min_months or months > max_months:
            return False, None, f"{_('Term must be from')} {min_months} {_('to')} {max_months} {_('months')}"
        
        return True, months, None
    except:
        return False, None, _('Enter number of months (numbers only)')


def validate_age(text: str, translate=None) -> Tuple[bool, Optional[int], Optional[str]]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    _ = translate if translate else lambda x: x
    try:
        age = int(text)
        
        if age < 18:
            return False, None, _('You must be over 18 years old')
        
        if age > 100:
            return False, None, _('Enter correct age')
        
        return True, age, None
    except:
        return False, None, _('Enter age (numbers only)')


def validate_positive_number(text: str, field_name: str, translate=None) -> Tuple[bool, Optional[int], Optional[str]]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞"""
    _ = translate if translate else lambda x: x
    try:
        number = int(text)
        
        if number < 0:
            return False, None, f"{field_name} {_('cannot be negative')}"
        
        return True, number, None
    except:
        return False, None, f"{_('Enter')} {field_name.lower()} {_('(numbers only)')}"


def format_amount(amount: Decimal) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    return f"{amount:,.0f}".replace(",", " ")


def format_loan_summary(loan_data: dict, translate=None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –∫—Ä–µ–¥–∏—Ç—É"""
    _ = translate if translate else lambda x: x
    loan_type = _('Car loan') if loan_data["loan_type"] == "carloan" else _('Microloan')
    
    summary = f"**{loan_type}**\n\n"
    summary += f"üí∞ {_('Amount')}: {format_amount(loan_data['amount'])} {_('sum')}\n"
    summary += f"üìä {_('Rate')}: {loan_data['rate']}%\n"
    summary += f"üìÖ {_('Term')}: {loan_data['term_months']} {_('months')}\n"
    summary += f"üí≥ {_('Monthly payment')}: {format_amount(loan_data['monthly_payment'])} {_('sum')}\n"
    summary += f"üí∏ {_('Income')}: {format_amount(loan_data['income'])} {_('sum')}\n"
    
    if loan_data.get('other_payments'):
        summary += f"üíµ {_('Other payments')}: {format_amount(loan_data['other_payments'])} {_('sum')}\n"
    
    return summary


def detect_device_type(user: TelegramUser) -> DeviceType:
    """
    –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    """
    # –í Telegram Bot API –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    # –≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    return DeviceType.OTHER


def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Markdown"""
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in special_chars:
        text = text.replace(char, f'\\{char}')
    return text


async def notify_admins(bot: Bot, message: str, admin_ids: list[int]) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
    for admin_id in admin_ids:
        try:
            await bot.send_message(admin_id, message, parse_mode="Markdown")
        except Exception:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º –∞–¥–º–∏–Ω–∞–º
            pass