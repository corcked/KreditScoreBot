import asyncio
import random
from datetime import datetime, timedelta

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, update
from sqlalchemy.ext.asyncio import AsyncSession

from src.bot.keyboards import Keyboards
from src.bot.states import BankFlowStates
from src.config.settings import settings
from src.core.enums import LoanStatus
from src.db.database import get_db_context
from src.db.models import LoanApplication, User

router = Router(name="bank_flow")


@router.callback_query(F.data == "send_to_bank")
async def start_send_to_bank(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –±–∞–Ω–∫"""
    async with get_db_context() as db:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await db.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞—è–≤–∫—É
        result = await db.execute(
            select(LoanApplication)
            .where(LoanApplication.user_id == user.id)
            .where(LoanApplication.is_archived == False)
            .where(LoanApplication.status == LoanStatus.NEW)
            .order_by(LoanApplication.created_at.desc())
        )
        application = result.scalar_one_or_none()
        
        if not application:
            await callback.answer("–ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ü–î–ù
        if application.pdn_value > 50:
            await callback.answer(
                "–ü—Ä–∏ –ü–î–ù > 50% –±–∞–Ω–∫–∏ –Ω–µ —Å–º–æ–≥—É—Ç –≤—ã–¥–∞—Ç—å –∫—Ä–µ–¥–∏—Ç",
                show_alert=True
            )
            return
        
        await state.update_data(application_id=application.id)
        
        confirm_text = (
            "üè¶ **–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –≤ –±–∞–Ω–∫–∏**\n\n"
            "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–æ –≤—Å–µ –±–∞–Ω–∫–∏-–ø–∞—Ä—Ç–Ω–µ—Ä—ã.\n"
            "–ë–∞–Ω–∫–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –∑–∞—è–≤–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—è—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.\n\n"
            "‚è± –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: 10 –º–∏–Ω—É—Ç\n\n"
            "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É?"
        )
        
        keyboard = [
            [
                types.InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_send"),
                types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_send"),
            ]
        ]
        
        await callback.message.edit_text(
            confirm_text,
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="Markdown"
        )
        
        await state.set_state(BankFlowStates.confirming_send)
    
    await callback.answer()


@router.callback_query(BankFlowStates.confirming_send, F.data == "confirm_send")
async def confirm_send_to_bank(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –±–∞–Ω–∫"""
    data = await state.get_data()
    application_id = data.get("application_id")
    
    if not application_id:
        await callback.answer("–û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    async with get_db_context() as db:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        result = await db.execute(
            select(LoanApplication).where(LoanApplication.id == application_id)
        )
        application = result.scalar_one_or_none()
        
        if not application:
            await callback.answer("–û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        application.status = LoanStatus.SENT
        application.sent_to_bank_at = datetime.utcnow()
        await db.commit()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await callback.message.edit_text(
        "‚úÖ **–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!**\n\n"
        "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–æ –≤—Å–µ –±–∞–Ω–∫–∏-–ø–∞—Ä—Ç–Ω–µ—Ä—ã.\n"
        "–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–∏–º –æ—Ç–≤–µ—Ç—ã.\n\n"
        "üì± –û–∂–∏–¥–∞–π—Ç–µ SMS —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –æ—Ç –±–∞–Ω–∫–æ–≤.",
        reply_markup=Keyboards.main_menu(),
        parse_mode="Markdown"
    )
    
    await state.clear()
    await callback.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –æ—Ç–≤–µ—Ç–∞ –±–∞–Ω–∫–∞
    asyncio.create_task(simulate_bank_response(callback.bot, callback.from_user.id, application_id))


@router.callback_query(BankFlowStates.confirming_send, F.data == "cancel_send")
async def cancel_send_to_bank(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –±–∞–Ω–∫"""
    await callback.message.edit_text(
        "–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=Keyboards.main_menu()
    )
    await state.clear()
    await callback.answer()


async def simulate_bank_response(bot, user_telegram_id: int, application_id: int):
    """–°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–∞–Ω–∫–∞"""
    # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    await asyncio.sleep(settings.bank_response_delay_minutes * 60)
    
    async with get_db_context() as db:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        result = await db.execute(
            select(LoanApplication).where(LoanApplication.id == application_id)
        )
        application = result.scalar_one_or_none()
        
        if not application or application.status != LoanStatus.SENT:
            return
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –±–∞–Ω–∫–∞
        is_approved = random.random() < settings.bank_approval_probability
        
        if is_approved:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è" –æ—Ç –±–∞–Ω–∫–æ–≤
            banks = [
                ("–ö–∞–ø–∏—Ç–∞–ª–±–∞–Ω–∫", application.annual_rate - 2),
                ("–£–∑–ø—Ä–æ–º—Å—Ç—Ä–æ–π–±–∞–Ω–∫", application.annual_rate - 1),
                ("–ò–ø–æ—Ç–µ–∫–∞-–±–∞–Ω–∫", application.annual_rate),
                ("–•–∞–º–∫–æ—Ä–±–∞–Ω–∫", application.annual_rate + 1),
            ]
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –±–∞–Ω–∫–∏ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ —Å—Ç–∞–≤–∫–∞–º–∏
            valid_banks = []
            for bank_name, rate in banks:
                if application.loan_type.value == "carloan":
                    if 4 <= rate <= 48:
                        valid_banks.append((bank_name, rate))
                else:  # microloan
                    if 18 <= rate <= 79:
                        valid_banks.append((bank_name, rate))
            
            if valid_banks:
                response_text = "üì± **SMS –æ—Ç –±–∞–Ω–∫–æ–≤ –ø–æ–ª—É—á–µ–Ω–∞!**\n\n"
                response_text += "–ü–æ—Å—Ç—É–ø–∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:\n\n"
                
                for bank_name, rate in valid_banks[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 3 –±–∞–Ω–∫–æ–≤
                    response_text += f"üè¶ **{bank_name}**\n"
                    response_text += f"   –°—Ç–∞–≤–∫–∞: {rate}%\n"
                    response_text += f"   –°—Ç–∞—Ç—É—Å: ‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–æ\n\n"
                
                response_text += "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –±–∞–Ω–∫."
                
                bank_response = f"–û–¥–æ–±—Ä–µ–Ω–æ {len(valid_banks)} –±–∞–Ω–∫–∞–º–∏"
            else:
                response_text = (
                    "üì± **–û—Ç–≤–µ—Ç –æ—Ç –±–∞–Ω–∫–æ–≤ –ø–æ–ª—É—á–µ–Ω**\n\n"
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.\n"
                    "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É–ª—É—á—à–∏—Ç—å –∫—Ä–µ–¥–∏—Ç–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ."
                )
                bank_response = "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
        else:
            response_text = (
                "üì± **–û—Ç–≤–µ—Ç –æ—Ç –±–∞–Ω–∫–æ–≤ –ø–æ–ª—É—á–µ–Ω**\n\n"
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –¥–æ—Ö–æ–¥\n"
                "‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏\n"
                "‚Ä¢ –í—ã—Å–æ–∫–∞—è –¥–æ–ª–≥–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞."
            )
            bank_response = "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
        application.bank_response_at = datetime.utcnow()
        application.bank_response = bank_response
        await db.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await bot.send_message(
                user_telegram_id,
                response_text,
                parse_mode="Markdown"
            )
        except Exception:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
            pass


@router.message(F.text == "/my_app")
async def show_my_application_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–µ–∫—É—â–µ–π –∑–∞—è–≤–∫–∏"""
    async with get_db_context() as db:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await db.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await message.answer(
                "–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞—è–≤–∫—É
        result = await db.execute(
            select(LoanApplication)
            .where(LoanApplication.user_id == user.id)
            .where(LoanApplication.is_archived == False)
            .order_by(LoanApplication.created_at.desc())
        )
        application = result.scalar_one_or_none()
        
        if not application:
            await message.answer(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ–ª–≥–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏.",
                reply_markup=Keyboards.main_menu()
            )
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
        from src.bot.utils import format_amount
        from src.core.pdn import PDNCalculator
        
        loan_type = "–ê–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç" if application.loan_type.value == "carloan" else "–ú–∏–∫—Ä–æ–∑–∞–π–º"
        
        status_text = {
            LoanStatus.NEW: "üÜï –ù–æ–≤–∞—è",
            LoanStatus.SENT: "üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–Ω–∫",
            LoanStatus.ARCHIVED: "üìÅ –í –∞—Ä—Ö–∏–≤–µ"
        }[application.status]
        
        pdn_status = PDNCalculator.get_pdn_status(application.pdn_value)
        pdn_emoji = PDNCalculator.get_pdn_emoji(pdn_status)
        
        text = f"**–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –∑–∞—è–≤–∫–∞**\n\n"
        text += f"üìÖ –î–∞—Ç–∞: {application.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        text += f"üìä –°—Ç–∞—Ç—É—Å: {status_text}\n"
        
        if application.status == LoanStatus.SENT and application.bank_response:
            text += f"üè¶ –û—Ç–≤–µ—Ç –±–∞–Ω–∫–æ–≤: {application.bank_response}\n"
        
        text += f"\n**{loan_type}**\n"
        text += f"üí∞ –°—É–º–º–∞: {format_amount(application.amount)} —Å—É–º\n"
        text += f"üìä –°—Ç–∞–≤–∫–∞: {application.annual_rate}%\n"
        text += f"üìÖ –°—Ä–æ–∫: {application.term_months} –º–µ—Å.\n"
        text += f"üí≥ –ü–ª–∞—Ç–µ–∂: {format_amount(application.monthly_payment)} —Å—É–º\n"
        text += f"{pdn_emoji} –ü–î–ù: {application.pdn_value}%"
        
        can_send = (
            application.status == LoanStatus.NEW and
            PDNCalculator.can_get_loan(application.pdn_value)
        )
        
        await message.answer(
            text,
            reply_markup=Keyboards.application_actions(can_send=can_send),
            parse_mode="Markdown"
        )