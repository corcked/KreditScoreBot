from aiogram import F, Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from src.bot.keyboards import Keyboards
from src.config.settings import settings
from src.core.referral import ReferralSystem
from src.db.database import get_db_context
from src.db.models import User

router = Router(name="referral")


@router.callback_query(F.data == "referral")
@router.message(Command("invite"))
async def show_referral_program(event: types.Message | types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
    if isinstance(event, types.CallbackQuery):
        message = event.message
        user_id = event.from_user.id
        is_callback = True
    else:
        message = event
        user_id = event.from_user.id
        is_callback = False
    
    async with get_db_context() as db:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await db.execute(
            select(User).where(User.telegram_id == user_id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            error_text = "–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞."
            if is_callback:
                await event.answer(error_text, show_alert=True)
            else:
                await message.answer(error_text)
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        referral_link = ReferralSystem.generate_referral_link(
            settings.bot_username,
            user.telegram_id
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        referral_count = user.referral_count
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = ReferralSystem.format_referral_message(referral_link, referral_count)
        
        # –°–æ–∑–¥–∞–µ–º URL –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞
        share_url = ReferralSystem.create_share_button_url(referral_link)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if is_callback:
            await message.edit_text(
                text,
                reply_markup=Keyboards.referral_menu(share_url),
                parse_mode="Markdown"
            )
            await event.answer()
        else:
            await message.answer(
                text,
                reply_markup=Keyboards.referral_menu(share_url),
                parse_mode="Markdown"
            )
    
    await state.clear()


@router.callback_query(F.data == "settings")
async def show_settings(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    async with get_db_context() as db:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await db.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        language = "üá∑üá∫ –†—É—Å—Å–∫–∏–π" if user.language_code == "ru" else "üá∫üáø O'zbek"
        
        text = f"‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n"
        text += f"üë§ –ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone_number or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        text += f"üåê –Ø–∑—ã–∫: {language}\n"
        text += f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y')}\n\n"
        text += "–î–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:"
        
        await callback.message.edit_text(
            text,
            reply_markup=Keyboards.language_choice(),
            parse_mode="Markdown"
        )
    
    await state.clear()
    await callback.answer()


@router.callback_query(F.data.startswith("lang:"))
async def change_language(callback: types.CallbackQuery):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    language = callback.data.split(":")[1]
    
    async with get_db_context() as db:
        # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await db.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if user:
            user.language_code = language
            await db.commit()
            
            lang_name = "–†—É—Å—Å–∫–∏–π" if language == "ru" else "O'zbek"
            await callback.message.edit_text(
                f"‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {lang_name}",
                reply_markup=Keyboards.main_menu()
            )
        else:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞", show_alert=True)
    
    await callback.answer()


@router.message(Command("help"))
async def show_help(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    help_text = """
üìö **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/my_app - –ú–æ—è —Ç–µ–∫—É—â–∞—è –∑–∞—è–≤–∫–∞
/invite - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:**

1Ô∏è‚É£ **–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏**
   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫—Ä–µ–¥–∏—Ç–∞ (–∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç –∏–ª–∏ –º–∏–∫—Ä–æ–∑–∞–π–º)
   ‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É, —Å—Ç–∞–≤–∫—É –∏ —Å—Ä–æ–∫
   ‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –¥–æ—Ö–æ–¥

2Ô∏è‚É£ **–†–∞—Å—á–µ—Ç –ü–î–ù**
   ‚Ä¢ –ü–î–ù —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
   ‚Ä¢ üü¢ < 35% - –æ—Ç–ª–∏—á–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å
   ‚Ä¢ üü° 35-50% - –ø—Ä–∏–µ–º–ª–µ–º—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å
   ‚Ä¢ üî¥ > 50% - –≤—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞

3Ô∏è‚É£ **–°–∫–æ—Ä–∏–Ω–≥-–±–∞–ª–ª**
   ‚Ä¢ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   ‚Ä¢ –ß–µ–º –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö, —Ç–µ–º –≤—ã—à–µ –±–∞–ª–ª
   ‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –¥–ª—è –±–æ–Ω—É—Å–æ–≤

4Ô∏è‚É£ **–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –±–∞–Ω–∫**
   ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–∞ –ø—Ä–∏ –ü–î–ù ‚â§ 50%
   ‚Ä¢ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤–æ –≤—Å–µ –±–∞–Ω–∫–∏-–ø–∞—Ä—Ç–Ω–µ—Ä—ã
   ‚Ä¢ –û—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç

**–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã?**
–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @kreditscore_support
"""
    
    await message.answer(
        help_text,
        parse_mode="Markdown",
        reply_markup=Keyboards.main_menu()
    )