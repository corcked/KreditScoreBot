from decimal import Decimal

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, update
from sqlalchemy.ext.asyncio import AsyncSession

from src.bot.keyboards import Keyboards
from src.bot.states import LoanApplicationStates
from src.bot.utils import (
    format_amount,
    format_loan_summary,
    validate_amount,
    validate_positive_number,
    validate_rate,
    validate_term,
)
from src.core.enums import CarCondition, LoanStatus, LoanType, ReceiveMethod
from src.core.pdn import PDNCalculator
from src.db.database import get_db_context
from src.db.models import LoanApplication, PersonalData, User

router = Router(name="loan")


@router.callback_query(F.data == "new_loan")
async def start_new_loan(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏"""
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫—Ä–µ–¥–∏—Ç–∞:\n\n"
        "üöó **–ê–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç**\n"
        "‚Ä¢ –î–æ 1 –º–ª—Ä–¥ —Å—É–º\n"
        "‚Ä¢ –°—Ç–∞–≤–∫–∞: 4-48%\n"
        "‚Ä¢ –°—Ä–æ–∫: 6 –º–µ—Å - 5 –ª–µ—Ç\n\n"
        "üí∞ **–ú–∏–∫—Ä–æ–∑–∞–π–º**\n"
        "‚Ä¢ –î–æ 100 –º–ª–Ω —Å—É–º\n"
        "‚Ä¢ –°—Ç–∞–≤–∫–∞: 18-79%\n"
        "‚Ä¢ –°—Ä–æ–∫: 1 –º–µ—Å - 3 –≥–æ–¥–∞",
        reply_markup=Keyboards.loan_type_choice(),
        parse_mode="Markdown"
    )
    await state.set_state(LoanApplicationStates.choosing_loan_type)
    await callback.answer()


@router.callback_query(LoanApplicationStates.choosing_loan_type, F.data.startswith("loan_type:"))
async def process_loan_type(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫—Ä–µ–¥–∏—Ç–∞"""
    loan_type = callback.data.split(":")[1]
    await state.update_data(loan_type=loan_type)
    
    if loan_type == LoanType.CARLOAN.value:
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:",
            reply_markup=Keyboards.car_condition_choice()
        )
        await state.set_state(LoanApplicationStates.choosing_car_condition)
    else:
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–Ω–µ–≥:",
            reply_markup=Keyboards.receive_method_choice()
        )
        await state.set_state(LoanApplicationStates.choosing_receive_method)
    
    await callback.answer()


@router.callback_query(LoanApplicationStates.choosing_car_condition, F.data.startswith("car:"))
async def process_car_condition(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    car_condition = callback.data.split(":")[1]
    await state.update_data(car_condition=car_condition)
    
    limits = PDNCalculator.LOAN_LIMITS[LoanType.CARLOAN]
    
    await callback.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞ (–¥–æ {format_amount(limits['max_amount'])} —Å—É–º):",
        reply_markup=Keyboards.cancel_button()
    )
    await state.set_state(LoanApplicationStates.entering_amount)
    await callback.answer()


@router.callback_query(LoanApplicationStates.choosing_receive_method, F.data.startswith("receive:"))
async def process_receive_method(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –ø–æ–ª—É—á–µ–Ω–∏—è"""
    receive_method = callback.data.split(":")[1]
    await state.update_data(receive_method=receive_method)
    
    limits = PDNCalculator.LOAN_LIMITS[LoanType.MICROLOAN]
    
    await callback.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞ (–¥–æ {format_amount(limits['max_amount'])} —Å—É–º):",
        reply_markup=Keyboards.cancel_button()
    )
    await state.set_state(LoanApplicationStates.entering_amount)
    await callback.answer()


@router.message(LoanApplicationStates.entering_amount)
async def process_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã"""
    data = await state.get_data()
    loan_type = LoanType(data["loan_type"])
    limits = PDNCalculator.LOAN_LIMITS[loan_type]
    
    valid, amount, error = validate_amount(message.text, limits["max_amount"])
    
    if not valid:
        await message.answer(f"‚ùå {error}", reply_markup=Keyboards.cancel_button())
        return
    
    await state.update_data(amount=amount)
    
    await message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É ({limits['min_rate']}-{limits['max_rate']}%):",
        reply_markup=Keyboards.cancel_button()
    )
    await state.set_state(LoanApplicationStates.entering_rate)


@router.message(LoanApplicationStates.entering_rate)
async def process_rate(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–∏"""
    data = await state.get_data()
    loan_type = LoanType(data["loan_type"])
    limits = PDNCalculator.LOAN_LIMITS[loan_type]
    
    valid, rate, error = validate_rate(
        message.text,
        Decimal(limits["min_rate"]),
        Decimal(limits["max_rate"])
    )
    
    if not valid:
        await message.answer(f"‚ùå {error}", reply_markup=Keyboards.cancel_button())
        return
    
    await state.update_data(rate=rate)
    
    min_term = limits["min_term_months"]
    max_term = limits["max_term_months"]
    
    await message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ –≤ –º–µ—Å—è—Ü–∞—Ö ({min_term}-{max_term}):",
        reply_markup=Keyboards.cancel_button()
    )
    await state.set_state(LoanApplicationStates.entering_term)


@router.message(LoanApplicationStates.entering_term)
async def process_term(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Å—Ä–æ–∫–∞"""
    data = await state.get_data()
    loan_type = LoanType(data["loan_type"])
    limits = PDNCalculator.LOAN_LIMITS[loan_type]
    
    valid, term, error = validate_term(
        message.text,
        limits["min_term_months"],
        limits["max_term_months"]
    )
    
    if not valid:
        await message.answer(f"‚ùå {error}", reply_markup=Keyboards.cancel_button())
        return
    
    await state.update_data(term_months=term)
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥ (—Å—É–º):",
        reply_markup=Keyboards.cancel_button()
    )
    await state.set_state(LoanApplicationStates.entering_income)


@router.message(LoanApplicationStates.entering_income)
async def process_income(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞"""
    valid, income, error = validate_amount(message.text, 10**12)  # –ú–∞–∫—Å–∏–º—É–º —Ç—Ä–∏–ª–ª–∏–æ–Ω
    
    if not valid:
        await message.answer(f"‚ùå {error}", reply_markup=Keyboards.cancel_button())
        return
    
    await state.update_data(income=income)
    
    await message.answer(
        "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ –¥—Ä—É–≥–∏–º –∫—Ä–µ–¥–∏—Ç–∞–º?\n"
        "–ï—Å–ª–∏ –¥–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Å—É–º–º—É. –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
        reply_markup=Keyboards.skip_other_payments()
    )
    await state.set_state(LoanApplicationStates.entering_other_payments)


@router.callback_query(LoanApplicationStates.entering_other_payments, F.data == "skip_other_payments")
async def skip_other_payments(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –≤–≤–æ–¥–∞ –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π"""
    await state.update_data(other_payments=Decimal("0"))
    await show_loan_confirmation(callback.message, state)
    await callback.answer()


@router.message(LoanApplicationStates.entering_other_payments)
async def process_other_payments(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π"""
    valid, payments, error = validate_amount(message.text, 10**12)
    
    if not valid:
        await message.answer(f"‚ùå {error}", reply_markup=Keyboards.skip_other_payments())
        return
    
    await state.update_data(other_payments=payments)
    await show_loan_confirmation(message, state)


async def show_loan_confirmation(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    data = await state.get_data()
    
    # –†–∞—Å—á–µ—Ç –∞–Ω–Ω—É–∏—Ç–µ—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    monthly_payment = PDNCalculator.calculate_annuity_payment(
        data["amount"],
        data["rate"],
        data["term_months"]
    )
    
    # –†–∞—Å—á–µ—Ç –ü–î–ù
    pdn_value = PDNCalculator.calculate_pdn(
        monthly_payment,
        data["income"],
        data.get("other_payments", Decimal("0"))
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await state.update_data(
        monthly_payment=monthly_payment,
        pdn_value=pdn_value
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ü–î–ù
    pdn_status = PDNCalculator.get_pdn_status(pdn_value)
    pdn_emoji = PDNCalculator.get_pdn_emoji(pdn_status)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
    summary = format_loan_summary(data)
    summary += f"\n{pdn_emoji} **–ü–î–ù: {pdn_value}%**\n"
    
    if not PDNCalculator.can_get_loan(pdn_value):
        summary += "\n‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!** –ü—Ä–∏ –ü–î–ù > 50% –±–∞–Ω–∫–∏ –Ω–µ —Å–º–æ–≥—É—Ç –≤—ã–¥–∞—Ç—å –∫—Ä–µ–¥–∏—Ç."
    
    await message.answer(
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n\n{summary}\n\n–í—Å–µ –≤–µ—Ä–Ω–æ?",
        reply_markup=Keyboards.confirm_application(),
        parse_mode="Markdown"
    )
    await state.set_state(LoanApplicationStates.confirming_application)


@router.callback_query(LoanApplicationStates.confirming_application, F.data == "confirm_app")
async def confirm_application(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    data = await state.get_data()
    
    async with get_db_context() as db:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await db.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞—è–≤–∫–∏
        await db.execute(
            update(LoanApplication)
            .where(LoanApplication.user_id == user.id)
            .where(LoanApplication.is_archived == False)
            .values(is_archived=True)
        )
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
        application = LoanApplication(
            user_id=user.id,
            loan_type=LoanType(data["loan_type"]),
            amount=data["amount"],
            annual_rate=data["rate"],
            term_months=data["term_months"],
            car_condition=CarCondition(data["car_condition"]) if data.get("car_condition") else None,
            receive_method=ReceiveMethod(data["receive_method"]) if data.get("receive_method") else None,
            monthly_payment=data["monthly_payment"],
            pdn_value=data["pdn_value"],
            status=LoanStatus.NEW
        )
        
        db.add(application)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Ö–æ–¥ –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        result = await db.execute(
            select(PersonalData).where(PersonalData.user_id == user.id)
        )
        personal_data = result.scalar_one_or_none()
        
        if personal_data:
            personal_data.monthly_income = data["income"]
            if data.get("other_payments"):
                personal_data.has_other_loans = True
                personal_data.other_loans_monthly_payment = data["other_payments"]
        
        await db.commit()
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ü–î–ù
    pdn_status = PDNCalculator.get_pdn_status(data["pdn_value"])
    pdn_description = PDNCalculator.get_pdn_description(data["pdn_value"], pdn_status)
    
    can_send = PDNCalculator.can_get_loan(data["pdn_value"])
    
    await callback.message.edit_text(
        f"‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        f"{pdn_description}\n\n"
        f"–ß—Ç–æ –¥–∞–ª—å—à–µ?",
        reply_markup=Keyboards.application_actions(can_send=can_send),
        parse_mode="Markdown"
    )
    
    await state.clear()
    await callback.answer("–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!")


@router.callback_query(LoanApplicationStates.confirming_application, F.data == "cancel_app")
async def cancel_application(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    await callback.message.edit_text(
        "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=Keyboards.main_menu()
    )
    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "cancel")
async def cancel_any(callback: types.CallbackQuery, state: FSMContext):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–º–µ–Ω–∞"""
    await callback.message.edit_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=Keyboards.main_menu()
    )
    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "my_applications")
async def show_applications(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with get_db_context() as db:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await db.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞—è–≤–∫—É
        result = await db.execute(
            select(LoanApplication)
            .where(LoanApplication.user_id == user.id)
            .where(LoanApplication.is_archived == False)
            .order_by(LoanApplication.created_at.desc())
        )
        application = result.scalar_one_or_none()
        
        if not application:
            await callback.message.edit_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ–ª–≥–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏.",
                reply_markup=Keyboards.main_menu()
            )
            await callback.answer()
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
        loan_type = "–ê–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç" if application.loan_type == LoanType.CARLOAN else "–ú–∏–∫—Ä–æ–∑–∞–π–º"
        
        status_text = {
            LoanStatus.NEW: "üÜï –ù–æ–≤–∞—è",
            LoanStatus.SENT: "üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–Ω–∫",
            LoanStatus.ARCHIVED: "üìÅ –í –∞—Ä—Ö–∏–≤–µ"
        }[application.status]
        
        pdn_status = PDNCalculator.get_pdn_status(application.pdn_value)
        pdn_emoji = PDNCalculator.get_pdn_emoji(pdn_status)
        
        text = f"**–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –∑–∞—è–≤–∫–∞**\n\n"
        text += f"üìÖ –î–∞—Ç–∞: {application.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        text += f"üìä –°—Ç–∞—Ç—É—Å: {status_text}\n\n"
        text += f"**{loan_type}**\n"
        text += f"üí∞ –°—É–º–º–∞: {format_amount(application.amount)} —Å—É–º\n"
        text += f"üìä –°—Ç–∞–≤–∫–∞: {application.annual_rate}%\n"
        text += f"üìÖ –°—Ä–æ–∫: {application.term_months} –º–µ—Å.\n"
        text += f"üí≥ –ü–ª–∞—Ç–µ–∂: {format_amount(application.monthly_payment)} —Å—É–º\n"
        text += f"{pdn_emoji} –ü–î–ù: {application.pdn_value}%\n"
        
        can_send = (
            application.status == LoanStatus.NEW and
            PDNCalculator.can_get_loan(application.pdn_value)
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=Keyboards.application_actions(can_send=can_send),
            parse_mode="Markdown"
        )
    
    await callback.answer()