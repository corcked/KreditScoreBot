from datetime import datetime

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from src.bot.keyboards import Keyboards
from src.bot.states import PersonalDataStates
from src.bot.utils import validate_age, validate_positive_number
from src.core.enums import (
    Education,
    Gender,
    HousingStatus,
    MaritalStatus,
    Region,
    DeviceType,
)
from src.core.scoring import PersonalData as PersonalDataSchema, ScoringCalculator
from src.core.field_protection import FieldProtectionManager
from src.db.database import get_db_context
from src.db.models import PersonalData, ReferralRegistration, User

router = Router(name="personal_data")


@router.callback_query(F.data.in_(["personal_data", "fill_personal"]))
async def start_personal_data(callback: types.CallbackQuery, state: FSMContext, _: callable):
    """–ù–∞—á–∞–ª–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    async with get_db_context() as db:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await db.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.answer(_('Error: user not found'), show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        result = await db.execute(
            select(PersonalData).where(PersonalData.user_id == user.id)
        )
        personal_data = result.scalar_one_or_none()
        
        if not personal_data:
            await callback.answer(_('Error: data not found'), show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏
        schema = PersonalDataSchema(
            age=personal_data.age,
            gender=personal_data.gender,
            work_experience_months=personal_data.work_experience_months,
            address_stability_years=personal_data.address_stability_years,
            housing_status=personal_data.housing_status,
            marital_status=personal_data.marital_status,
            education=personal_data.education,
            closed_loans_count=personal_data.closed_loans_count,
            region=personal_data.region,
            device_type=personal_data.device_type
        )
        completion = ScoringCalculator.get_completion_percentage(schema)
        
        text = f"üë§ **{_('Personal data')}**\n\n"
        text += f"{_('Profile completion')}: {completion}%\n\n"
        text += f"{_('Fill in all data to increase score')}\n\n"
        text += _('Enter your age')
        
        await callback.message.edit_text(
            text,
            reply_markup=Keyboards.cancel_button(_),
            parse_mode="Markdown"
        )
        
        await state.set_state(PersonalDataStates.entering_age)
        await state.update_data(user_id=user.id)
    
    await callback.answer()


@router.message(PersonalDataStates.entering_age)
async def process_age(message: types.Message, state: FSMContext, _: callable):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    valid, age, error = validate_age(message.text, _)
    
    if not valid:
        await message.answer(f"‚ùå {error}", reply_markup=Keyboards.cancel_button(_))
        return
    
    await state.update_data(age=age)
    
    await message.answer(
        _('Choose your gender'),
        reply_markup=Keyboards.gender_choice(_)
    )
    await state.set_state(PersonalDataStates.choosing_gender)


@router.callback_query(PersonalDataStates.choosing_gender, F.data.startswith("gender:"))
async def process_gender(callback: types.CallbackQuery, state: FSMContext, _: callable):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    gender = callback.data.split(":")[1]
    await state.update_data(gender=gender)
    
    await callback.message.edit_text(
        _('Enter work experience in months'),
        reply_markup=Keyboards.cancel_button(_)
    )
    await state.set_state(PersonalDataStates.entering_work_experience)
    await callback.answer()


@router.message(PersonalDataStates.entering_work_experience)
async def process_work_experience(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–∂–∞ —Ä–∞–±–æ—Ç—ã"""
    valid, months, error = validate_positive_number(message.text, "–°—Ç–∞–∂")
    
    if not valid:
        await message.answer(f"‚ùå {error}", reply_markup=Keyboards.cancel_button())
        return
    
    await state.update_data(work_experience_months=months)
    
    await message.answer(
        "–°–∫–æ–ª—å–∫–æ –ª–µ—Ç –≤—ã –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ –ø–æ —Ç–µ–∫—É—â–µ–º—É –∞–¥—Ä–µ—Å—É?",
        reply_markup=Keyboards.cancel_button()
    )
    await state.set_state(PersonalDataStates.entering_address_stability)


@router.message(PersonalDataStates.entering_address_stability)
async def process_address_stability(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∞–¥—Ä–µ—Å–∞"""
    valid, years, error = validate_positive_number(message.text, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç")
    
    if not valid:
        await message.answer(f"‚ùå {error}", reply_markup=Keyboards.cancel_button())
        return
    
    await state.update_data(address_stability_years=years)
    
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç—É—Å –∂–∏–ª—å—è:",
        reply_markup=Keyboards.housing_status_choice()
    )
    await state.set_state(PersonalDataStates.choosing_housing_status)


@router.callback_query(PersonalDataStates.choosing_housing_status, F.data.startswith("house:"))
async def process_housing_status(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∂–∏–ª—å—è"""
    housing = callback.data.split(":")[1]
    await state.update_data(housing_status=housing)
    
    await callback.message.edit_text(
        "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ —Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ:",
        reply_markup=Keyboards.marital_status_choice()
    )
    await state.set_state(PersonalDataStates.choosing_marital_status)
    await callback.answer()


@router.callback_query(PersonalDataStates.choosing_marital_status, F.data.startswith("marital:"))
async def process_marital_status(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–º–µ–π–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è"""
    marital = callback.data.split(":")[1]
    await state.update_data(marital_status=marital)
    
    await callback.message.edit_text(
        "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:",
        reply_markup=Keyboards.education_choice()
    )
    await state.set_state(PersonalDataStates.choosing_education)
    await callback.answer()


@router.callback_query(PersonalDataStates.choosing_education, F.data.startswith("edu:"))
async def process_education(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è"""
    education = callback.data.split(":")[1]
    await state.update_data(education=education)
    
    await callback.message.edit_text(
        "–°–∫–æ–ª—å–∫–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã–ª–∏?\n"
        "(–≤–≤–µ–¥–∏—Ç–µ 0, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∫—Ä–µ–¥–∏—Ç–æ–≤)",
        reply_markup=Keyboards.cancel_button()
    )
    await state.set_state(PersonalDataStates.entering_closed_loans)
    await callback.answer()


@router.message(PersonalDataStates.entering_closed_loans)
async def process_closed_loans(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤"""
    valid, count, error = validate_positive_number(message.text, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤")
    
    if not valid:
        await message.answer(f"‚ùå {error}", reply_markup=Keyboards.cancel_button())
        return
    
    await state.update_data(closed_loans_count=count)
    
    await message.answer(
        "–í –∫–∞–∫–æ–º —Ä–µ–≥–∏–æ–Ω–µ –≤—ã –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ?",
        reply_markup=Keyboards.region_choice()
    )
    await state.set_state(PersonalDataStates.choosing_region)


@router.callback_query(PersonalDataStates.choosing_region, F.data == "region_more")
async def show_more_regions(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã"""
    await callback.message.edit_reply_markup(reply_markup=Keyboards.region_choice_more())
    await callback.answer()


@router.callback_query(PersonalDataStates.choosing_region, F.data == "region_back")
async def show_less_regions(callback: types.CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤"""
    await callback.message.edit_reply_markup(reply_markup=Keyboards.region_choice())
    await callback.answer()


@router.callback_query(PersonalDataStates.choosing_region, F.data.startswith("region:"))
async def process_region(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞"""
    region = callback.data.split(":")[1]
    await state.update_data(region=region)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    
    async with get_db_context() as db:
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        result = await db.execute(
            select(PersonalData).where(PersonalData.user_id == data["user_id"])
        )
        personal_data = result.scalar_one_or_none()
        
        if personal_data:
            personal_data.age = data["age"]
            personal_data.gender = Gender(data["gender"])
            personal_data.work_experience_months = data["work_experience_months"]
            personal_data.address_stability_years = data["address_stability_years"]
            personal_data.housing_status = HousingStatus(data["housing_status"])
            personal_data.marital_status = MaritalStatus(data["marital_status"])
            personal_data.education = Education(data["education"])
            personal_data.closed_loans_count = data["closed_loans_count"]
            personal_data.region = Region(data["region"])
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            result = await db.execute(
                select(User).where(User.id == data["user_id"])
            )
            user = result.scalar_one_or_none()
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ—Ä–∏–Ω–≥–∞
            schema = PersonalDataSchema(
                age=personal_data.age,
                gender=personal_data.gender,
                work_experience_months=personal_data.work_experience_months,
                address_stability_years=personal_data.address_stability_years,
                housing_status=personal_data.housing_status,
                marital_status=personal_data.marital_status,
                education=personal_data.education,
                closed_loans_count=personal_data.closed_loans_count,
                has_other_loans=personal_data.has_other_loans,
                pdn_with_other_loans=personal_data.other_loans_monthly_payment,
                region=personal_data.region,
                device_type=personal_data.device_type,
                referral_count=user.referral_count if user else 0
            )
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä–∏–Ω–≥
            score = ScoringCalculator.calculate_score(schema)
            personal_data.current_score = score
            personal_data.score_updated_at = datetime.utcnow()
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            if user and user.referral_count > 0:
                # –ù–∞—Ö–æ–¥–∏–º –Ω–µ–ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã
                result = await db.execute(
                    select(ReferralRegistration)
                    .where(ReferralRegistration.referrer_id == user.id)
                    .where(ReferralRegistration.bonus_applied == False)
                )
                registrations = result.scalars().all()
                
                for reg in registrations:
                    reg.bonus_applied = True
            
            await db.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é —Å–∫–æ—Ä–∏–Ω–≥–∞
            breakdown = ScoringCalculator.get_score_breakdown(schema)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = ScoringCalculator.format_score_message(score, breakdown)
            message += f"\n\n‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!"
            
            await callback.message.edit_text(
                message,
                reply_markup=Keyboards.main_menu(),
                parse_mode="Markdown"
            )
    
    await state.clear()
    await callback.answer("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")


@router.callback_query(F.data == "edit_personal_data")
async def show_personal_data_menu(callback: types.CallbackQuery, _: callable):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    user_id = callback.from_user.id
    
    async with get_db_context() as db:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await db.execute(
            select(User).where(User.telegram_id == user_id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.message.edit_text(
                f"‚ùå {_('User not found')}",
                reply_markup=Keyboards.back_to_menu(_)
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await db.execute(
            select(PersonalData).where(PersonalData.user_id == user.id)
        )
        personal_data = result.scalar_one_or_none()
        
        if not personal_data:
            await callback.message.edit_text(
                f"‚ùå {_('Personal data not found')}",
                reply_markup=Keyboards.back_to_menu(_)
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª–µ–π
        field_status = FieldProtectionManager.get_field_status(personal_data)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
        await show_data_menu_with_protection(callback, field_status, personal_data, _)


async def show_data_menu_with_protection(
    callback: types.CallbackQuery, 
    field_status: dict, 
    personal_data: PersonalData,
    _: callable
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥–∞–Ω–Ω—ã—Ö —Å —É—á–µ—Ç–æ–º –∑–∞—â–∏—Ç—ã –ø–æ–ª–µ–π"""
    
    message = f"üë§ **{_('Personal Data')}**\n\n"
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ–ª—è –Ω–∞ –≥—Ä—É–ø–ø—ã
    protected_fields = []
    editable_fields = []
    filled_fields = []
    
    for field_name, status in field_status.items():
        if status['is_protected']:
            protected_fields.append((field_name, status))
        elif status['is_filled']:
            filled_fields.append((field_name, status))
        else:
            editable_fields.append((field_name, status))
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if filled_fields or protected_fields:
        message += f"üìã **{_('Current Data')}:**\n"
        
        for field_name, status in filled_fields + protected_fields:
            value = format_field_value(status['current_value'], field_name, _)
            icon = "üîí" if status['is_protected'] else "‚úÖ"
            message += f"{icon} {_(status['display_name'])}: {value}\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if editable_fields:
        message += f"\n‚úèÔ∏è **{_('Available for editing')}:**\n"
        for field_name, status in editable_fields:
            if not status['is_filled']:
                message += f"üìù {_(status['display_name'])}: {_('Not filled')}\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –ø–æ–ª—è—Ö
    if protected_fields:
        message += f"\nüîí **{_('Protected fields')}:** {len(protected_fields)}\n"
        message += f"üí° {_('These fields cannot be changed as they affect your credit score')}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–∫–æ—Ä–∏–Ω–≥–µ
    if personal_data.current_score:
        message += f"\nüìä **{_('Current score')}:** {personal_data.current_score} {_('points')}\n"
    
    await callback.message.edit_text(
        message,
        reply_markup=Keyboards.personal_data_menu_protected(field_status, _),
        parse_mode="Markdown"
    )


def format_field_value(value: any, field_name: str, _: callable) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if value is None:
        return _("Not filled")
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π
    if field_name == 'gender':
        return _("Male") if value == Gender.MALE else _("Female")
    elif field_name == 'monthly_income':
        return f"{value:,.0f} {_('som')}".replace(",", " ")
    elif field_name == 'has_other_loans':
        return _("Yes") if value else _("No")
    elif field_name in ['work_experience_months', 'address_stability_years']:
        if field_name == 'work_experience_months':
            return f"{value} {_('months')}"
        else:
            return f"{value} {_('years')}"
    elif field_name == 'housing_status':
        housing_map = {
            HousingStatus.OWN: _("Own property"),
            HousingStatus.OWN_WITH_MORTGAGE: _("Own with mortgage"),
            HousingStatus.RENT: _("Rent"),
            HousingStatus.RELATIVES: _("With relatives")
        }
        return housing_map.get(value, str(value))
    elif field_name == 'marital_status':
        marital_map = {
            MaritalStatus.SINGLE: _("Single"),
            MaritalStatus.MARRIED: _("Married"),
            MaritalStatus.DIVORCED: _("Divorced"),
            MaritalStatus.WIDOWED: _("Widowed")
        }
        return marital_map.get(value, str(value))
    elif field_name == 'education':
        education_map = {
            Education.SECONDARY: _("Secondary"),
            Education.SPECIALIZED_SECONDARY: _("Specialized secondary"),
            Education.INCOMPLETE_HIGHER: _("Incomplete higher"),
            Education.HIGHER: _("Higher"),
            Education.POSTGRADUATE: _("Postgraduate")
        }
        return education_map.get(value, str(value))
    elif field_name == 'region':
        # –î–ª—è —Ä–µ–≥–∏–æ–Ω–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ enum
        return str(value.value).replace('_', ' ')
    elif field_name == 'device_type':
        device_map = {
            DeviceType.APPLE: _("Apple"),
            DeviceType.ANDROID: _("Android"),
            DeviceType.OTHER: _("Other")
        }
        return device_map.get(value, str(value))
    
    return str(value)


@router.callback_query(F.data == "explain_protection")
async def explain_field_protection(callback: types.CallbackQuery, _: callable):
    """–û–±—ä—è—Å–Ω–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –∑–∞—â–∏—Ç—ã –ø–æ–ª–µ–π"""
    
    message = f"üîí **{_('Field Protection System')}**\n\n"
    
    message += f"**{_('Why are some fields protected?')}**\n"
    message += f"‚Ä¢ {_('Filled fields affect your credit score')}\n"
    message += f"‚Ä¢ {_('This prevents score manipulation')}\n"
    message += f"‚Ä¢ {_('Ensures assessment reliability')}\n\n"
    
    message += f"**{_('What you can always edit:')}**\n"
    message += f"üí∞ {_('Monthly income')}\n"
    message += f"üè¶ {_('Information about other loans')}\n\n"
    
    message += f"**{_('What gets protected:')}**\n"
    message += f"üë§ {_('Personal information (age, gender)')}\n"
    message += f"üè† {_('Housing and family status')}\n"
    message += f"üéì {_('Education and work experience')}\n"
    message += f"üìç {_('Location and device type')}\n\n"
    
    message += f"üí° {_('Tip: Fill all fields carefully before first scoring calculation!')}"
    
    await callback.message.edit_text(
        message,
        reply_markup=Keyboards.back_to_personal_data(_),
        parse_mode="Markdown"
    )


@router.callback_query(F.data == "view_protected_data")
async def view_protected_data(callback: types.CallbackQuery, _: callable):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    user_id = callback.from_user.id
    
    async with get_db_context() as db:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await db.execute(
            select(User).where(User.telegram_id == user_id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.answer(_("User not found"))
            return
        
        result = await db.execute(
            select(PersonalData).where(PersonalData.user_id == user.id)
        )
        personal_data = result.scalar_one_or_none()
        
        if not personal_data:
            await callback.answer(_("Data not found"))
            return
        
        field_status = FieldProtectionManager.get_field_status(personal_data)
        protected_fields = [
            (name, status) for name, status in field_status.items() 
            if status['is_protected']
        ]
        
        if not protected_fields:
            await callback.answer(_("No protected fields"))
            return
        
        message = f"üîí **{_('Protected Data')}**\n\n"
        message += f"{_('These fields cannot be changed:')}\n\n"
        
        for field_name, status in protected_fields:
            value = format_field_value(status['current_value'], field_name, _)
            message += f"üîí **{_(status['display_name'])}**: {value}\n"
        
        message += f"\nüí° {_('These fields are locked because they affect your credit score.')}"
        
        await callback.message.edit_text(
            message,
            reply_markup=Keyboards.back_to_personal_data(_),
            parse_mode="Markdown"
        )


@router.callback_query(F.data == "edit_available_fields")
async def show_editable_fields_menu(callback: types.CallbackQuery, _: callable):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö –ø–æ–ª–µ–π"""
    user_id = callback.from_user.id
    
    async with get_db_context() as db:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await db.execute(
            select(User).where(User.telegram_id == user_id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.answer(_("User not found"))
            return
        
        result = await db.execute(
            select(PersonalData).where(PersonalData.user_id == user.id)
        )
        personal_data = result.scalar_one_or_none()
        
        if not personal_data:
            await callback.answer(_("Data not found"))
            return
        
        field_status = FieldProtectionManager.get_field_status(personal_data)
        
        message = f"‚úèÔ∏è **{_('Edit available fields')}**\n\n"
        message += f"{_('Select a field to edit:')}\n"
        
        await callback.message.edit_text(
            message,
            reply_markup=Keyboards.editable_fields_menu(field_status, _),
            parse_mode="Markdown"
        )


@router.callback_query(F.data.startswith("edit_field:"))
async def handle_field_edit_attempt(callback: types.CallbackQuery, state: FSMContext, _: callable):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è"""
    field_name = callback.data.split(":")[1]
    user_id = callback.from_user.id
    
    async with get_db_context() as db:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await db.execute(
            select(User).where(User.telegram_id == user_id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.answer(_("User not found"))
            return
        
        result = await db.execute(
            select(PersonalData).where(PersonalData.user_id == user.id)
        )
        personal_data = result.scalar_one_or_none()
        
        if not personal_data:
            await callback.answer(_("Data not found"))
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—â–∏—â–µ–Ω–æ –ª–∏ –ø–æ–ª–µ
        if FieldProtectionManager.is_field_protected(personal_data, field_name):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞—â–∏—Ç–µ
            reason = FieldProtectionManager.get_protection_reason(field_name, _)
            await callback.answer(
                f"üîí {reason}",
                show_alert=True
            )
            return
        
        # –ï—Å–ª–∏ –ø–æ–ª–µ –Ω–µ –∑–∞—â–∏—â–µ–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        await start_field_editing(callback, field_name, personal_data, state, _)


async def start_field_editing(callback: types.CallbackQuery, field_name: str, personal_data: PersonalData, state: FSMContext, _: callable):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è"""
    await state.update_data(
        editing_field=field_name,
        user_id=personal_data.user_id
    )
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –∫–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç—å
    field_handlers = {
        'age': (PersonalDataStates.entering_age, _('Enter your age')),
        'work_experience_months': (PersonalDataStates.entering_work_experience, _('Enter work experience in months')),
        'address_stability_years': (PersonalDataStates.entering_address_stability, _('How many years have you lived at your current address?')),
        'closed_loans_count': (PersonalDataStates.entering_closed_loans, _('How many loans have you successfully closed?\n(enter 0 if none)')),
        'monthly_income': (PersonalDataStates.entering_income, _('Enter your monthly income')),
        'other_loans_monthly_payment': (PersonalDataStates.entering_other_loans_payment, _('Enter monthly payment for other loans'))
    }
    
    if field_name in field_handlers:
        state_to_set, message = field_handlers[field_name]
        await state.set_state(state_to_set)
        await callback.message.edit_text(
            message,
            reply_markup=Keyboards.cancel_button(_)
        )
    elif field_name == 'gender':
        await state.set_state(PersonalDataStates.choosing_gender)
        await callback.message.edit_text(
            _('Choose your gender'),
            reply_markup=Keyboards.gender_choice(_)
        )
    elif field_name == 'housing_status':
        await state.set_state(PersonalDataStates.choosing_housing_status)
        await callback.message.edit_text(
            _('Specify your housing status:'),
            reply_markup=Keyboards.housing_status_choice(_)
        )
    elif field_name == 'marital_status':
        await state.set_state(PersonalDataStates.choosing_marital_status)
        await callback.message.edit_text(
            _('Specify your marital status:'),
            reply_markup=Keyboards.marital_status_choice(_)
        )
    elif field_name == 'education':
        await state.set_state(PersonalDataStates.choosing_education)
        await callback.message.edit_text(
            _('Specify your education level:'),
            reply_markup=Keyboards.education_choice(_)
        )
    elif field_name == 'region':
        await state.set_state(PersonalDataStates.choosing_region)
        await callback.message.edit_text(
            _('In which region do you live?'),
            reply_markup=Keyboards.region_choice(_)
        )
    elif field_name == 'has_other_loans':
        await state.set_state(PersonalDataStates.choosing_has_loans)
        await callback.message.edit_text(
            _('Do you have other loans?'),
            reply_markup=Keyboards.yes_no_choice(_)
        )
    else:
        await callback.answer(_("This field cannot be edited"), show_alert=True)
        return
    
    await callback.answer()