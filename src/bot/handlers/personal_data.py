from datetime import datetime

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from src.bot.keyboards import Keyboards
from src.bot.states import PersonalDataStates
from src.bot.utils import validate_age, validate_positive_number
from src.core.enums import (
    Education,
    Gender,
    HousingStatus,
    MaritalStatus,
    Region,
)
from src.core.scoring import PersonalData as PersonalDataSchema, ScoringCalculator
from src.db.database import get_db_context
from src.db.models import PersonalData, ReferralRegistration, User

router = Router(name="personal_data")


@router.callback_query(F.data.in_(["personal_data", "fill_personal"]))
async def start_personal_data(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    async with get_db_context() as db:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await db.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        result = await db.execute(
            select(PersonalData).where(PersonalData.user_id == user.id)
        )
        personal_data = result.scalar_one_or_none()
        
        if not personal_data:
            await callback.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏
        schema = PersonalDataSchema(
            age=personal_data.age,
            gender=personal_data.gender,
            work_experience_months=personal_data.work_experience_months,
            address_stability_years=personal_data.address_stability_years,
            housing_status=personal_data.housing_status,
            marital_status=personal_data.marital_status,
            education=personal_data.education,
            closed_loans_count=personal_data.closed_loans_count,
            region=personal_data.region,
            device_type=personal_data.device_type
        )
        completion = ScoringCalculator.get_completion_percentage(schema)
        
        text = f"üë§ **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ**\n\n"
        text += f"–ó–∞–ø–æ–ª–Ω–µ–Ω–æ: {completion}%\n\n"
        text += "–ß–µ–º –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –≤—ã —É–∫–∞–∂–µ—Ç–µ, —Ç–µ–º –≤—ã—à–µ –±—É–¥–µ—Ç –≤–∞—à —Å–∫–æ—Ä–∏–Ω–≥-–±–∞–ª–ª.\n\n"
        text += "–ù–∞—á–Ω–µ–º —Å –≤–æ–∑—Ä–∞—Å—Ç–∞. –°–∫–æ–ª—å–∫–æ –≤–∞–º –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç?"
        
        await callback.message.edit_text(
            text,
            reply_markup=Keyboards.cancel_button(),
            parse_mode="Markdown"
        )
        
        await state.set_state(PersonalDataStates.entering_age)
        await state.update_data(user_id=user.id)
    
    await callback.answer()


@router.message(PersonalDataStates.entering_age)
async def process_age(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    valid, age, error = validate_age(message.text)
    
    if not valid:
        await message.answer(f"‚ùå {error}", reply_markup=Keyboards.cancel_button())
        return
    
    await state.update_data(age=age)
    
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
        reply_markup=Keyboards.gender_choice()
    )
    await state.set_state(PersonalDataStates.choosing_gender)


@router.callback_query(PersonalDataStates.choosing_gender, F.data.startswith("gender:"))
async def process_gender(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    gender = callback.data.split(":")[1]
    await state.update_data(gender=gender)
    
    await callback.message.edit_text(
        "–°–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –Ω–∞ —Ç–µ–∫—É—â–µ–º –º–µ—Å—Ç–µ —Ä–∞–±–æ—Ç—ã?\n"
        "(–≤–≤–µ–¥–∏—Ç–µ 0, –µ—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ)",
        reply_markup=Keyboards.cancel_button()
    )
    await state.set_state(PersonalDataStates.entering_work_experience)
    await callback.answer()


@router.message(PersonalDataStates.entering_work_experience)
async def process_work_experience(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–∂–∞ —Ä–∞–±–æ—Ç—ã"""
    valid, months, error = validate_positive_number(message.text, "–°—Ç–∞–∂")
    
    if not valid:
        await message.answer(f"‚ùå {error}", reply_markup=Keyboards.cancel_button())
        return
    
    await state.update_data(work_experience_months=months)
    
    await message.answer(
        "–°–∫–æ–ª—å–∫–æ –ª–µ—Ç –≤—ã –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ –ø–æ —Ç–µ–∫—É—â–µ–º—É –∞–¥—Ä–µ—Å—É?",
        reply_markup=Keyboards.cancel_button()
    )
    await state.set_state(PersonalDataStates.entering_address_stability)


@router.message(PersonalDataStates.entering_address_stability)
async def process_address_stability(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∞–¥—Ä–µ—Å–∞"""
    valid, years, error = validate_positive_number(message.text, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç")
    
    if not valid:
        await message.answer(f"‚ùå {error}", reply_markup=Keyboards.cancel_button())
        return
    
    await state.update_data(address_stability_years=years)
    
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç—É—Å –∂–∏–ª—å—è:",
        reply_markup=Keyboards.housing_status_choice()
    )
    await state.set_state(PersonalDataStates.choosing_housing_status)


@router.callback_query(PersonalDataStates.choosing_housing_status, F.data.startswith("house:"))
async def process_housing_status(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∂–∏–ª—å—è"""
    housing = callback.data.split(":")[1]
    await state.update_data(housing_status=housing)
    
    await callback.message.edit_text(
        "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ —Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ:",
        reply_markup=Keyboards.marital_status_choice()
    )
    await state.set_state(PersonalDataStates.choosing_marital_status)
    await callback.answer()


@router.callback_query(PersonalDataStates.choosing_marital_status, F.data.startswith("marital:"))
async def process_marital_status(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–º–µ–π–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è"""
    marital = callback.data.split(":")[1]
    await state.update_data(marital_status=marital)
    
    await callback.message.edit_text(
        "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:",
        reply_markup=Keyboards.education_choice()
    )
    await state.set_state(PersonalDataStates.choosing_education)
    await callback.answer()


@router.callback_query(PersonalDataStates.choosing_education, F.data.startswith("edu:"))
async def process_education(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è"""
    education = callback.data.split(":")[1]
    await state.update_data(education=education)
    
    await callback.message.edit_text(
        "–°–∫–æ–ª—å–∫–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã–ª–∏?\n"
        "(–≤–≤–µ–¥–∏—Ç–µ 0, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∫—Ä–µ–¥–∏—Ç–æ–≤)",
        reply_markup=Keyboards.cancel_button()
    )
    await state.set_state(PersonalDataStates.entering_closed_loans)
    await callback.answer()


@router.message(PersonalDataStates.entering_closed_loans)
async def process_closed_loans(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤"""
    valid, count, error = validate_positive_number(message.text, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤")
    
    if not valid:
        await message.answer(f"‚ùå {error}", reply_markup=Keyboards.cancel_button())
        return
    
    await state.update_data(closed_loans_count=count)
    
    await message.answer(
        "–í –∫–∞–∫–æ–º —Ä–µ–≥–∏–æ–Ω–µ –≤—ã –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ?",
        reply_markup=Keyboards.region_choice()
    )
    await state.set_state(PersonalDataStates.choosing_region)


@router.callback_query(PersonalDataStates.choosing_region, F.data == "region_more")
async def show_more_regions(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã"""
    await callback.message.edit_reply_markup(reply_markup=Keyboards.region_choice_more())
    await callback.answer()


@router.callback_query(PersonalDataStates.choosing_region, F.data == "region_back")
async def show_less_regions(callback: types.CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤"""
    await callback.message.edit_reply_markup(reply_markup=Keyboards.region_choice())
    await callback.answer()


@router.callback_query(PersonalDataStates.choosing_region, F.data.startswith("region:"))
async def process_region(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞"""
    region = callback.data.split(":")[1]
    await state.update_data(region=region)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    
    async with get_db_context() as db:
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        result = await db.execute(
            select(PersonalData).where(PersonalData.user_id == data["user_id"])
        )
        personal_data = result.scalar_one_or_none()
        
        if personal_data:
            personal_data.age = data["age"]
            personal_data.gender = Gender(data["gender"])
            personal_data.work_experience_months = data["work_experience_months"]
            personal_data.address_stability_years = data["address_stability_years"]
            personal_data.housing_status = HousingStatus(data["housing_status"])
            personal_data.marital_status = MaritalStatus(data["marital_status"])
            personal_data.education = Education(data["education"])
            personal_data.closed_loans_count = data["closed_loans_count"]
            personal_data.region = Region(data["region"])
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            result = await db.execute(
                select(User).where(User.id == data["user_id"])
            )
            user = result.scalar_one_or_none()
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ—Ä–∏–Ω–≥–∞
            schema = PersonalDataSchema(
                age=personal_data.age,
                gender=personal_data.gender,
                work_experience_months=personal_data.work_experience_months,
                address_stability_years=personal_data.address_stability_years,
                housing_status=personal_data.housing_status,
                marital_status=personal_data.marital_status,
                education=personal_data.education,
                closed_loans_count=personal_data.closed_loans_count,
                has_other_loans=personal_data.has_other_loans,
                pdn_with_other_loans=personal_data.other_loans_monthly_payment,
                region=personal_data.region,
                device_type=personal_data.device_type,
                referral_count=user.referral_count if user else 0
            )
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä–∏–Ω–≥
            score = ScoringCalculator.calculate_score(schema)
            personal_data.current_score = score
            personal_data.score_updated_at = datetime.utcnow()
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            if user and user.referral_count > 0:
                # –ù–∞—Ö–æ–¥–∏–º –Ω–µ–ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã
                result = await db.execute(
                    select(ReferralRegistration)
                    .where(ReferralRegistration.referrer_id == user.id)
                    .where(ReferralRegistration.bonus_applied == False)
                )
                registrations = result.scalars().all()
                
                for reg in registrations:
                    reg.bonus_applied = True
            
            await db.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é —Å–∫–æ—Ä–∏–Ω–≥–∞
            breakdown = ScoringCalculator.get_score_breakdown(schema)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = ScoringCalculator.format_score_message(score, breakdown)
            message += f"\n\n‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!"
            
            await callback.message.edit_text(
                message,
                reply_markup=Keyboards.main_menu(),
                parse_mode="Markdown"
            )
    
    await state.clear()
    await callback.answer("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")