import pytest
from decimal import Decimal

from src.core.enums import LoanType, PDNStatus
from src.core.pdn import PDNCalculator


class TestPDNCalculator:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ü–î–ù"""

    def test_calculate_annuity_payment_basic(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –∞–Ω–Ω—É–∏—Ç–µ—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
        # 1 –º–ª–Ω —Å—É–º, 20% –≥–æ–¥–æ–≤—ã—Ö, 12 –º–µ—Å—è—Ü–µ–≤
        amount = Decimal("1000000")
        rate = Decimal("20")
        term = 12
        
        payment = PDNCalculator.calculate_annuity_payment(amount, rate, term)
        
        # –û–∂–∏–¥–∞–µ–º—ã–π –ø–ª–∞—Ç–µ–∂ –æ–∫–æ–ª–æ 92,634 —Å—É–º
        assert payment == Decimal("92634.47")

    def test_calculate_annuity_payment_zero_rate(self):
        """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏ –Ω—É–ª–µ–≤–æ–π —Å—Ç–∞–≤–∫–µ"""
        amount = Decimal("1000000")
        rate = Decimal("0")
        term = 10
        
        payment = PDNCalculator.calculate_annuity_payment(amount, rate, term)
        
        # –ü—Ä–∏ 0% –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∏–º —Å—É–º–º—É –Ω–∞ —Å—Ä–æ–∫
        assert payment == Decimal("100000.00")

    def test_calculate_annuity_payment_invalid_params(self):
        """–¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        with pytest.raises(ValueError):
            PDNCalculator.calculate_annuity_payment(
                Decimal("-1000"), Decimal("10"), 12
            )
        
        with pytest.raises(ValueError):
            PDNCalculator.calculate_annuity_payment(
                Decimal("1000"), Decimal("-5"), 12
            )
        
        with pytest.raises(ValueError):
            PDNCalculator.calculate_annuity_payment(
                Decimal("1000"), Decimal("10"), 0
            )

    def test_calculate_pdn_basic(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –ü–î–ù"""
        monthly_payment = Decimal("50000")
        monthly_income = Decimal("200000")
        
        pdn = PDNCalculator.calculate_pdn(monthly_payment, monthly_income)
        
        assert pdn == Decimal("25.00")

    def test_calculate_pdn_with_other_payments(self):
        """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –ü–î–ù —Å –¥—Ä—É–≥–∏–º–∏ –ø–ª–∞—Ç–µ–∂–∞–º–∏"""
        monthly_payment = Decimal("50000")
        monthly_income = Decimal("200000")
        other_payments = Decimal("30000")
        
        pdn = PDNCalculator.calculate_pdn(
            monthly_payment, monthly_income, other_payments
        )
        
        # (50000 + 30000) / 200000 * 100 = 40%
        assert pdn == Decimal("40.00")

    def test_calculate_pdn_invalid_income(self):
        """–¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –¥–æ—Ö–æ–¥–æ–º"""
        with pytest.raises(ValueError):
            PDNCalculator.calculate_pdn(
                Decimal("50000"), Decimal("0")
            )
        
        with pytest.raises(ValueError):
            PDNCalculator.calculate_pdn(
                Decimal("50000"), Decimal("-100000")
            )

    def test_get_pdn_status(self):
        """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ü–î–ù"""
        assert PDNCalculator.get_pdn_status(Decimal("20")) == PDNStatus.GREEN
        assert PDNCalculator.get_pdn_status(Decimal("34.99")) == PDNStatus.GREEN
        assert PDNCalculator.get_pdn_status(Decimal("35")) == PDNStatus.YELLOW
        assert PDNCalculator.get_pdn_status(Decimal("45")) == PDNStatus.YELLOW
        assert PDNCalculator.get_pdn_status(Decimal("50")) == PDNStatus.YELLOW
        assert PDNCalculator.get_pdn_status(Decimal("50.01")) == PDNStatus.RED
        assert PDNCalculator.get_pdn_status(Decimal("75")) == PDNStatus.RED

    def test_get_pdn_emoji(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
        assert PDNCalculator.get_pdn_emoji(PDNStatus.GREEN) == "üü¢"
        assert PDNCalculator.get_pdn_emoji(PDNStatus.YELLOW) == "üü°"
        assert PDNCalculator.get_pdn_emoji(PDNStatus.RED) == "üî¥"

    def test_validate_loan_parameters_microloan(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–∏–∫—Ä–æ–∑–∞–π–º–∞"""
        # –í–∞–ª–∏–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        result = PDNCalculator.validate_loan_parameters(
            LoanType.MICROLOAN,
            Decimal("5000000"),  # 5 –º–ª–Ω
            Decimal("25"),       # 25%
            24                   # 2 –≥–æ–¥–∞
        )
        assert result["valid"] is True
        assert len(result["errors"]) == 0
        
        # –°—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
        result = PDNCalculator.validate_loan_parameters(
            LoanType.MICROLOAN,
            Decimal("200000000"),  # 200 –º–ª–Ω
            Decimal("25"),
            24
        )
        assert result["valid"] is False
        assert any("–ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é" in e for e in result["errors"])
        
        # –°—Ç–∞–≤–∫–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        result = PDNCalculator.validate_loan_parameters(
            LoanType.MICROLOAN,
            Decimal("5000000"),
            Decimal("10"),  # –ú–µ–Ω—å—à–µ 18%
            24
        )
        assert result["valid"] is False
        assert any("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å" in e for e in result["errors"])

    def test_validate_loan_parameters_carloan(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–∞"""
        # –í–∞–ª–∏–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        result = PDNCalculator.validate_loan_parameters(
            LoanType.CARLOAN,
            Decimal("500000000"),  # 500 –º–ª–Ω
            Decimal("15"),         # 15%
            36                     # 3 –≥–æ–¥–∞
        )
        assert result["valid"] is True
        
        # –°—Ä–æ–∫ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        result = PDNCalculator.validate_loan_parameters(
            LoanType.CARLOAN,
            Decimal("500000000"),
            Decimal("15"),
            3  # 3 –º–µ—Å—è—Ü–∞ - –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞
        )
        assert result["valid"] is False
        assert any("–°—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å" in e for e in result["errors"])

    def test_can_get_loan(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞"""
        assert PDNCalculator.can_get_loan(Decimal("30")) is True
        assert PDNCalculator.can_get_loan(Decimal("50")) is True
        assert PDNCalculator.can_get_loan(Decimal("50.01")) is False
        assert PDNCalculator.can_get_loan(Decimal("75")) is False

    def test_format_amount(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–º–º—ã"""
        assert PDNCalculator.format_amount(Decimal("1000000")) == "1 000 000"
        assert PDNCalculator.format_amount(Decimal("1234567.89")) == "1 234 568"
        assert PDNCalculator.format_amount(Decimal("100")) == "100"

    def test_get_pdn_description(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –ü–î–ù"""
        desc = PDNCalculator.get_pdn_description(
            Decimal("25"), PDNStatus.GREEN
        )
        assert "üü¢" in desc
        assert "25%" in desc
        assert "–û—Ç–ª–∏—á–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å" in desc
        
        desc = PDNCalculator.get_pdn_description(
            Decimal("55"), PDNStatus.RED
        )
        assert "üî¥" in desc
        assert "55%" in desc
        assert "–Ω–µ —Å–º–æ–≥—É—Ç –≤—ã–¥–∞—Ç—å –∫—Ä–µ–¥–∏—Ç" in desc